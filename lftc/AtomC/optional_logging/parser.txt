Enter unit
Enter structDef
Attempting to consume(STRUCT) => found TYPE_INT
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter structDef
Attempting to consume(STRUCT) => found TYPE_CHAR
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_CHAR
Attempting to consume(TYPE_DOUBLE) => found TYPE_CHAR
Attempting to consume(TYPE_CHAR) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_CHAR
Attempting to consume(TYPE_DOUBLE) => found TYPE_CHAR
Attempting to consume(TYPE_CHAR) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter structDef
Attempting to consume(STRUCT) => found TYPE_DOUBLE
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter structDef
Attempting to consume(STRUCT) => found TYPE_DOUBLE
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => success
Attempting to consume(INT) => success
Attempting to consume(RBRACKET) => success
Exit arrayDecl (OK)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter structDef
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Attempting to consume(LACC) => success
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => success
Attempting to consume(INT) => success
Attempting to consume(RBRACKET) => success
Exit arrayDecl (OK)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_CHAR
Attempting to consume(TYPE_DOUBLE) => found TYPE_CHAR
Attempting to consume(TYPE_CHAR) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found RACC
Attempting to consume(TYPE_DOUBLE) => found RACC
Attempting to consume(TYPE_CHAR) => found RACC
Attempting to consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Attempting to consume(RACC) => success
Attempting to consume(SEMICOLON) => success
Exit structDef (OK)
Enter structDef
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found STRUCT
Attempting to consume(TYPE_DOUBLE) => found STRUCT
Attempting to consume(TYPE_CHAR) => found STRUCT
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found STRUCT
Attempting to consume(TYPE_DOUBLE) => found STRUCT
Attempting to consume(TYPE_CHAR) => found STRUCT
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter structDef
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found STRUCT
Attempting to consume(TYPE_DOUBLE) => found STRUCT
Attempting to consume(TYPE_CHAR) => found STRUCT
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found STRUCT
Attempting to consume(TYPE_DOUBLE) => found STRUCT
Attempting to consume(TYPE_CHAR) => found STRUCT
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => success
Attempting to consume(INT) => success
Attempting to consume(RBRACKET) => success
Exit arrayDecl (OK)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter structDef
Attempting to consume(STRUCT) => found TYPE_DOUBLE
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Attempting to consume(LPAR) => success
Enter fnParam
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => success
Attempting to consume(INT) => success
Attempting to consume(RBRACKET) => success
Exit arrayDecl (OK)
Exit fnParam (OK)
Attempting to consume(COMMA) => success
Enter fnParam
Enter typeBase
Attempting to consume(TYPE_INT) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found RPAR
Exit arrayDecl (FAIL)
Exit fnParam (OK)
Attempting to consume(COMMA) => found RPAR
Attempting to consume(RPAR) => success
Enter stmCompound
Attempting to consume(LACC) => success
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found ID
Attempting to consume(TYPE_DOUBLE) => found ID
Attempting to consume(TYPE_CHAR) => found ID
Attempting to consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found ID
Exit stmCompound (FAIL)
Attempting to consume(IF) => found ID
Attempting to consume(WHILE) => found ID
Attempting to consume(RETURN) => found ID
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ASSIGN
Attempting to consume(DIV) => found ASSIGN
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found ASSIGN
Attempting to consume(SUB) => found ASSIGN
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found ASSIGN
Attempting to consume(LESSEQ) => found ASSIGN
Attempting to consume(GREATER) => found ASSIGN
Attempting to consume(GREATEREQ) => found ASSIGN
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found ASSIGN
Attempting to consume(NOTEQ) => found ASSIGN
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found ASSIGN
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found ASSIGN
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => success
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found INT
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found INT
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found ID
Attempting to consume(TYPE_DOUBLE) => found ID
Attempting to consume(TYPE_CHAR) => found ID
Attempting to consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found ID
Exit stmCompound (FAIL)
Attempting to consume(IF) => found ID
Attempting to consume(WHILE) => found ID
Attempting to consume(RETURN) => found ID
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ASSIGN
Attempting to consume(DIV) => found ASSIGN
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found ASSIGN
Attempting to consume(SUB) => found ASSIGN
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found ASSIGN
Attempting to consume(LESSEQ) => found ASSIGN
Attempting to consume(GREATER) => found ASSIGN
Attempting to consume(GREATEREQ) => found ASSIGN
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found ASSIGN
Attempting to consume(NOTEQ) => found ASSIGN
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found ASSIGN
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found ASSIGN
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => success
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found INT
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found INT
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found WHILE
Attempting to consume(TYPE_DOUBLE) => found WHILE
Attempting to consume(TYPE_CHAR) => found WHILE
Attempting to consume(STRUCT) => found WHILE
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found WHILE
Exit stmCompound (FAIL)
Attempting to consume(IF) => found WHILE
Attempting to consume(WHILE) => success
Attempting to consume(LPAR) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found LESS
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found LESS
Attempting to consume(DOT) => found LESS
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found LESS
Attempting to consume(DIV) => found LESS
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found LESS
Attempting to consume(SUB) => found LESS
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => success
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RPAR
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found LESS
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found LESS
Attempting to consume(DOT) => found LESS
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found LESS
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found LESS
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found LESS
Attempting to consume(DOT) => found LESS
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found LESS
Attempting to consume(DIV) => found LESS
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found LESS
Attempting to consume(SUB) => found LESS
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => success
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RPAR
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(RPAR) => success
Enter stm
Enter stmCompound
Attempting to consume(LACC) => success
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found TYPE_DOUBLE
Attempting to consume(TYPE_DOUBLE) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found SEMICOLON
Exit arrayDecl (FAIL)
Attempting to consume(SEMICOLON) => success
Exit varDef (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found ID
Attempting to consume(TYPE_DOUBLE) => found ID
Attempting to consume(TYPE_CHAR) => found ID
Attempting to consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found ID
Exit stmCompound (FAIL)
Attempting to consume(IF) => found ID
Attempting to consume(WHILE) => found ID
Attempting to consume(RETURN) => found ID
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ASSIGN
Attempting to consume(DIV) => found ASSIGN
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found ASSIGN
Attempting to consume(SUB) => found ASSIGN
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found ASSIGN
Attempting to consume(LESSEQ) => found ASSIGN
Attempting to consume(GREATER) => found ASSIGN
Attempting to consume(GREATEREQ) => found ASSIGN
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found ASSIGN
Attempting to consume(NOTEQ) => found ASSIGN
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found ASSIGN
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found ASSIGN
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => success
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found LBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RBRACKET
Attempting to consume(DIV) => found RBRACKET
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RBRACKET
Attempting to consume(SUB) => found RBRACKET
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RBRACKET
Attempting to consume(LESSEQ) => found RBRACKET
Attempting to consume(GREATER) => found RBRACKET
Attempting to consume(GREATEREQ) => found RBRACKET
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RBRACKET
Attempting to consume(NOTEQ) => found RBRACKET
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RBRACKET
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RBRACKET
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found RBRACKET
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RBRACKET
Attempting to consume(DIV) => found RBRACKET
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RBRACKET
Attempting to consume(SUB) => found RBRACKET
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RBRACKET
Attempting to consume(LESSEQ) => found RBRACKET
Attempting to consume(GREATER) => found RBRACKET
Attempting to consume(GREATEREQ) => found RBRACKET
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RBRACKET
Attempting to consume(NOTEQ) => found RBRACKET
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RBRACKET
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RBRACKET
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(RBRACKET) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found LBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RBRACKET
Attempting to consume(DIV) => found RBRACKET
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RBRACKET
Attempting to consume(SUB) => found RBRACKET
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RBRACKET
Attempting to consume(LESSEQ) => found RBRACKET
Attempting to consume(GREATER) => found RBRACKET
Attempting to consume(GREATEREQ) => found RBRACKET
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RBRACKET
Attempting to consume(NOTEQ) => found RBRACKET
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RBRACKET
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RBRACKET
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found RBRACKET
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RBRACKET
Attempting to consume(DIV) => found RBRACKET
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RBRACKET
Attempting to consume(SUB) => found RBRACKET
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RBRACKET
Attempting to consume(LESSEQ) => found RBRACKET
Attempting to consume(GREATER) => found RBRACKET
Attempting to consume(GREATEREQ) => found RBRACKET
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RBRACKET
Attempting to consume(NOTEQ) => found RBRACKET
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RBRACKET
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RBRACKET
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(RBRACKET) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found LBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RBRACKET
Attempting to consume(DIV) => found RBRACKET
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RBRACKET
Attempting to consume(SUB) => found RBRACKET
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RBRACKET
Attempting to consume(LESSEQ) => found RBRACKET
Attempting to consume(GREATER) => found RBRACKET
Attempting to consume(GREATEREQ) => found RBRACKET
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RBRACKET
Attempting to consume(NOTEQ) => found RBRACKET
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RBRACKET
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RBRACKET
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found RBRACKET
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found RBRACKET
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RBRACKET
Attempting to consume(DOT) => found RBRACKET
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RBRACKET
Attempting to consume(DIV) => found RBRACKET
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RBRACKET
Attempting to consume(SUB) => found RBRACKET
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RBRACKET
Attempting to consume(LESSEQ) => found RBRACKET
Attempting to consume(GREATER) => found RBRACKET
Attempting to consume(GREATEREQ) => found RBRACKET
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RBRACKET
Attempting to consume(NOTEQ) => found RBRACKET
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RBRACKET
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RBRACKET
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(RBRACKET) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found ID
Attempting to consume(TYPE_DOUBLE) => found ID
Attempting to consume(TYPE_CHAR) => found ID
Attempting to consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found ID
Exit stmCompound (FAIL)
Attempting to consume(IF) => found ID
Attempting to consume(WHILE) => found ID
Attempting to consume(RETURN) => found ID
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ASSIGN
Attempting to consume(DIV) => found ASSIGN
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found ASSIGN
Attempting to consume(SUB) => found ASSIGN
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found ASSIGN
Attempting to consume(LESSEQ) => found ASSIGN
Attempting to consume(GREATER) => found ASSIGN
Attempting to consume(GREATEREQ) => found ASSIGN
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found ASSIGN
Attempting to consume(NOTEQ) => found ASSIGN
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found ASSIGN
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found ASSIGN
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => success
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ADD
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ADD
Attempting to consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ADD
Attempting to consume(DIV) => found ADD
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => success
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found SEMICOLON
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ADD
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ADD
Attempting to consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found ADD
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ADD
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ADD
Attempting to consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ADD
Attempting to consume(DIV) => found ADD
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => success
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found SEMICOLON
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found ID
Attempting to consume(TYPE_DOUBLE) => found ID
Attempting to consume(TYPE_CHAR) => found ID
Attempting to consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found ID
Exit stmCompound (FAIL)
Attempting to consume(IF) => found ID
Attempting to consume(WHILE) => found ID
Attempting to consume(RETURN) => found ID
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ASSIGN
Attempting to consume(DIV) => found ASSIGN
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found ASSIGN
Attempting to consume(SUB) => found ASSIGN
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found ASSIGN
Attempting to consume(LESSEQ) => found ASSIGN
Attempting to consume(GREATER) => found ASSIGN
Attempting to consume(GREATEREQ) => found ASSIGN
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found ASSIGN
Attempting to consume(NOTEQ) => found ASSIGN
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found ASSIGN
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found ASSIGN
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ASSIGN
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ASSIGN
Attempting to consume(DOT) => found ASSIGN
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => success
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ADD
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ADD
Attempting to consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ADD
Attempting to consume(DIV) => found ADD
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => success
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found INT
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ADD
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ADD
Attempting to consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found ADD
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found ADD
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found ADD
Attempting to consume(DOT) => found ADD
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found ADD
Attempting to consume(DIV) => found ADD
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => success
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found INT
Enter exprUnary
Attempting to consume(SUB) => found INT
Attempting to consume(NOT) => found INT
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found INT
Attempting to consume(INT) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found RACC
Attempting to consume(TYPE_DOUBLE) => found RACC
Attempting to consume(TYPE_CHAR) => found RACC
Attempting to consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found RACC
Exit stmCompound (FAIL)
Attempting to consume(IF) => found RACC
Attempting to consume(WHILE) => found RACC
Attempting to consume(RETURN) => found RACC
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found RACC
Enter exprUnary
Attempting to consume(SUB) => found RACC
Attempting to consume(NOT) => found RACC
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found RACC
Attempting to consume(INT) => found RACC
Attempting to consume(DOUBLE) => found RACC
Attempting to consume(CHAR) => found RACC
Attempting to consume(STRING) => found RACC
Attempting to consume(LPAR) => found RACC
Exit exprPrimary (FAIL)
Exit exprPostfix (FAIL)
Exit exprUnary (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found RACC
Enter exprUnary
Attempting to consume(SUB) => found RACC
Attempting to consume(NOT) => found RACC
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found RACC
Attempting to consume(INT) => found RACC
Attempting to consume(DOUBLE) => found RACC
Attempting to consume(CHAR) => found RACC
Attempting to consume(STRING) => found RACC
Attempting to consume(LPAR) => found RACC
Exit exprPrimary (FAIL)
Exit exprPostfix (FAIL)
Exit exprUnary (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
Attempting to consume(SEMICOLON) => found RACC
Exit stm (FAIL)
Attempting to consume(RACC) => success
Exit stmCompound (OK)
Exit stm (OK)
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found RETURN
Attempting to consume(TYPE_DOUBLE) => found RETURN
Attempting to consume(TYPE_CHAR) => found RETURN
Attempting to consume(STRUCT) => found RETURN
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found RETURN
Exit stmCompound (FAIL)
Attempting to consume(IF) => found RETURN
Attempting to consume(WHILE) => found RETURN
Attempting to consume(RETURN) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found SEMICOLON
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found SEMICOLON
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found SEMICOLON
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found RACC
Attempting to consume(TYPE_DOUBLE) => found RACC
Attempting to consume(TYPE_CHAR) => found RACC
Attempting to consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found RACC
Exit stmCompound (FAIL)
Attempting to consume(IF) => found RACC
Attempting to consume(WHILE) => found RACC
Attempting to consume(RETURN) => found RACC
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found RACC
Enter exprUnary
Attempting to consume(SUB) => found RACC
Attempting to consume(NOT) => found RACC
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found RACC
Attempting to consume(INT) => found RACC
Attempting to consume(DOUBLE) => found RACC
Attempting to consume(CHAR) => found RACC
Attempting to consume(STRING) => found RACC
Attempting to consume(LPAR) => found RACC
Exit exprPrimary (FAIL)
Exit exprPostfix (FAIL)
Exit exprUnary (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found RACC
Enter exprUnary
Attempting to consume(SUB) => found RACC
Attempting to consume(NOT) => found RACC
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found RACC
Attempting to consume(INT) => found RACC
Attempting to consume(DOUBLE) => found RACC
Attempting to consume(CHAR) => found RACC
Attempting to consume(STRING) => found RACC
Attempting to consume(LPAR) => found RACC
Exit exprPrimary (FAIL)
Exit exprPostfix (FAIL)
Exit exprUnary (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
Attempting to consume(SEMICOLON) => found RACC
Exit stm (FAIL)
Attempting to consume(RACC) => success
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
Attempting to consume(STRUCT) => found VOID
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found VOID
Attempting to consume(TYPE_DOUBLE) => found VOID
Attempting to consume(TYPE_CHAR) => found VOID
Attempting to consume(STRUCT) => found VOID
Exit typeBase (FAIL)
Attempting to consume(VOID) => success
Attempting to consume(ID) => success
Attempting to consume(LPAR) => success
Enter fnParam
Enter typeBase
Attempting to consume(TYPE_INT) => found STRUCT
Attempting to consume(TYPE_DOUBLE) => found STRUCT
Attempting to consume(TYPE_CHAR) => found STRUCT
Attempting to consume(STRUCT) => success
Attempting to consume(ID) => success
Exit typeBase (OK)
Attempting to consume(ID) => success
Enter arrayDecl
Attempting to consume(LBRACKET) => found RPAR
Exit arrayDecl (FAIL)
Exit fnParam (OK)
Attempting to consume(COMMA) => found RPAR
Attempting to consume(RPAR) => success
Enter stmCompound
Attempting to consume(LACC) => success
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found ID
Attempting to consume(TYPE_DOUBLE) => found ID
Attempting to consume(TYPE_CHAR) => found ID
Attempting to consume(STRUCT) => found ID
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found ID
Exit stmCompound (FAIL)
Attempting to consume(IF) => found ID
Attempting to consume(WHILE) => found ID
Attempting to consume(RETURN) => found ID
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found RPAR
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(COMMA) => found RPAR
Attempting to consume(RPAR) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found RPAR
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(COMMA) => found RPAR
Attempting to consume(RPAR) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found SEMICOLON
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => success
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Attempting to consume(ASSIGN) => found RPAR
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found ID
Enter exprUnary
Attempting to consume(SUB) => found ID
Attempting to consume(NOT) => found ID
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => success
Attempting to consume(LPAR) => found DOT
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found DOT
Attempting to consume(DOT) => success
Attempting to consume(ID) => success
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found RPAR
Attempting to consume(DOT) => found RPAR
Exit exprPostfixPrim (OK)
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found RPAR
Attempting to consume(DIV) => found RPAR
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found RPAR
Attempting to consume(SUB) => found RPAR
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found RPAR
Attempting to consume(LESSEQ) => found RPAR
Attempting to consume(GREATER) => found RPAR
Attempting to consume(GREATEREQ) => found RPAR
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found RPAR
Attempting to consume(NOTEQ) => found RPAR
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found RPAR
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found RPAR
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(COMMA) => found RPAR
Attempting to consume(RPAR) => success
Exit exprPrimary (OK)
Enter exprPostfixPrim
Attempting to consume(LBRACKET) => found SEMICOLON
Attempting to consume(DOT) => found SEMICOLON
Exit exprPostfixPrim (OK)
Exit exprPostfix (OK)
Exit exprUnary (OK)
Exit exprCast (OK)
Enter exprMulPrim
Attempting to consume(MUL) => found SEMICOLON
Attempting to consume(DIV) => found SEMICOLON
Exit exprMulPrim (OK)
Exit exprMul (OK)
Enter exprAddPrim
Attempting to consume(ADD) => found SEMICOLON
Attempting to consume(SUB) => found SEMICOLON
Exit exprAddPrim (OK)
Exit exprAdd (OK)
Enter exprRelPrim
Attempting to consume(LESS) => found SEMICOLON
Attempting to consume(LESSEQ) => found SEMICOLON
Attempting to consume(GREATER) => found SEMICOLON
Attempting to consume(GREATEREQ) => found SEMICOLON
Exit exprRelPrim (OK)
Exit exprRel (OK)
Enter exprEqPrim
Attempting to consume(EQUAL) => found SEMICOLON
Attempting to consume(NOTEQ) => found SEMICOLON
Exit exprEqPrim (OK)
Exit exprEq (OK)
Enter exprAndPrim
Attempting to consume(AND) => found SEMICOLON
Exit exprAndPrim (OK)
Exit exprAnd (OK)
Enter exprOrPrim
Attempting to consume(OR) => found SEMICOLON
Exit exprOrPrim (OK)
Exit exprOr (OK)
Exit exprAssign (OK)
Exit expr (OK)
Attempting to consume(SEMICOLON) => success
Exit stm (OK)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found RACC
Attempting to consume(TYPE_DOUBLE) => found RACC
Attempting to consume(TYPE_CHAR) => found RACC
Attempting to consume(STRUCT) => found RACC
Exit typeBase (FAIL)
Exit varDef (FAIL)
Enter stm
Enter stmCompound
Attempting to consume(LACC) => found RACC
Exit stmCompound (FAIL)
Attempting to consume(IF) => found RACC
Attempting to consume(WHILE) => found RACC
Attempting to consume(RETURN) => found RACC
Enter expr
Enter exprAssign
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found RACC
Enter exprUnary
Attempting to consume(SUB) => found RACC
Attempting to consume(NOT) => found RACC
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found RACC
Attempting to consume(INT) => found RACC
Attempting to consume(DOUBLE) => found RACC
Attempting to consume(CHAR) => found RACC
Attempting to consume(STRING) => found RACC
Attempting to consume(LPAR) => found RACC
Exit exprPrimary (FAIL)
Exit exprPostfix (FAIL)
Exit exprUnary (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Enter exprOr
Enter exprAnd
Enter exprEq
Enter exprRel
Enter exprAdd
Enter exprMul
Enter exprCast
Attempting to consume(LPAR) => found RACC
Enter exprUnary
Attempting to consume(SUB) => found RACC
Attempting to consume(NOT) => found RACC
Enter exprPostfix
Enter exprPrimary
Attempting to consume(ID) => found RACC
Attempting to consume(INT) => found RACC
Attempting to consume(DOUBLE) => found RACC
Attempting to consume(CHAR) => found RACC
Attempting to consume(STRING) => found RACC
Attempting to consume(LPAR) => found RACC
Exit exprPrimary (FAIL)
Exit exprPostfix (FAIL)
Exit exprUnary (FAIL)
Exit exprCast (FAIL)
Exit exprMul (FAIL)
Exit exprAdd (FAIL)
Exit exprRel (FAIL)
Exit exprEq (FAIL)
Exit exprAnd (FAIL)
Exit exprOr (FAIL)
Exit exprAssign (FAIL)
Exit expr (FAIL)
Attempting to consume(SEMICOLON) => found RACC
Exit stm (FAIL)
Attempting to consume(RACC) => success
Exit stmCompound (OK)
Exit fnDef (OK)
Enter structDef
Attempting to consume(STRUCT) => found END
Exit structDef (FAIL)
Enter fnDef
Enter typeBase
Attempting to consume(TYPE_INT) => found END
Attempting to consume(TYPE_DOUBLE) => found END
Attempting to consume(TYPE_CHAR) => found END
Attempting to consume(STRUCT) => found END
Exit typeBase (FAIL)
Attempting to consume(VOID) => found END
Exit fnDef (FAIL)
Enter varDef
Enter typeBase
Attempting to consume(TYPE_INT) => found END
Attempting to consume(TYPE_DOUBLE) => found END
Attempting to consume(TYPE_CHAR) => found END
Attempting to consume(STRUCT) => found END
Exit typeBase (FAIL)
Exit varDef (FAIL)
Attempting to consume(END) => success
Exit unit (OK)
